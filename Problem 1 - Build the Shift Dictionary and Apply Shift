class Message:
    ### DO NOT MODIFY THIS METHOD ###
    def __init__(self, text):
        '''
        Initializes a Message object
                
        text (string): the message's text

        a Message object has two attributes:
            self.message_text (string, determined by input text)
            self.valid_words (list, determined using helper function load_words
        '''
        self.message_text = text
        #self.valid_words = load_words(WORDLIST_FILENAME)

    ### DO NOT MODIFY THIS METHOD ###
    def get_message_text(self):
        '''
        Used to safely access self.message_text outside of the class
        
        Returns: self.message_text
        '''
        return self.message_text

    ### DO NOT MODIFY THIS METHOD ###
    def get_valid_words(self):
        '''
        Used to safely access a copy of self.valid_words outside of the class
        
        Returns: a COPY of self.valid_words
        '''
        return self.valid_words[:]
        
    def build_shift_dict(self, shift):
        '''
        Creates a dictionary that can be used to apply a cipher to a letter.
        The dictionary maps every uppercase and lowercase letter to a
        character shifted down the alphabet by the input shift. The dictionary
        should have 52 keys of all the uppercase letters and all the lowercase
        letters only.        
        
        shift (integer): the amount by which to shift every letter of the 
        alphabet. 0 <= shift < 26

        Returns: a dictionary mapping a letter (string) to 
                 another letter (string). 
        '''
        # Create a dictionary from the marged lower and upper case alphabet
        alphabet = string.ascii_lowercase + string.ascii_uppercase
        dictionary_alphabet = dict(zip(alphabet, range(1,52)))
        
        # Create an empty dictionary
        shift_dictionary = {}
        
        # for every element in text message take the order in alphabet and add specified shift value
        for letter in self.message_text:
            shift_dictionary[letter] = dictionary_aplhabet.get(letter, 0) + self.shift

            # Create the list of shifted mapping numbers
            mapping_numbers = list(shift_dictionary.values())

            encrypted_message = ''
            
            # for every number in mapping numbers find this index and assign a new string 
            for number in mapping_numbers:
                keys = list(dictionary_alphabet.keys())
                values = list(dictionary_alphabet.values())

                encrypted_letter = keys[values.index(number)]
                encrypted_message  += encrypted_letter
                encrypted_message_keys = list(encrypted_message)
                encrypted_message_values = list(encrypted_message)

                self.shift_dict = dict(zip(encrypted_message_keys, encrypted_message_values))
                
        return self.shift_dict

    def apply_shift(self, shift):
        '''
        Applies the Caesar Cipher to self.message_text with the input shift.
        Creates a new string that is self.message_text shifted down the
        alphabet by some number of characters determined by the input shift        
        
        shift (integer): the shift with which to encrypt the message.
        0 <= shift < 26

        Returns: the message text (string) in which every character is shifted
             down the alphabet by the input shift
        '''
        pass #delete this line and replace with your code here
